<?xml version='1.1' encoding='UTF-8'?>
<flow-build plugin="workflow-job@1145.v7f2433caa07f">
  <actions>
    <hudson.model.CauseAction>
      <causeBag class="linked-hash-map">
        <entry>
          <hudson.model.Cause_-UserIdCause>
            <userId>jh7939</userId>
          </hudson.model.Cause_-UserIdCause>
          <int>1</int>
        </entry>
      </causeBag>
    </hudson.model.CauseAction>
    <org.jenkinsci.plugins.workflow.libs.LibrariesAction plugin="workflow-cps-global-lib@564.ve62a_4eb_b_e039">
      <libraries/>
    </org.jenkinsci.plugins.workflow.libs.LibrariesAction>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.ExecutionModelAction plugin="pipeline-model-definition@1.9.3">
      <stagesUUID>082cc5f0-d3e5-40ad-a2ee-d4da1c65799f</stagesUUID>
      <pipelineDefs>
        <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTPipelineDef plugin="pipeline-model-api@1.9.3">
          <stages>
            <stages>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
                <name>Checkout</name>
                <branches>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                    <name>default</name>
                    <steps>
                      <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                        <name>checkout</name>
                        <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                          <arguments class="linked-hash-map">
                            <entry>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                                <key>scm</key>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-GStringValue>
                                <value class="string">[$class: &apos;GitSCM&apos;, branches: [[name: &apos;*/main&apos;]], extensions: [], userRemoteConfigs: [[url: &apos;https://github.com/noddyc/MicroProject&apos;]]]</value>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-GStringValue>
                            </entry>
                          </arguments>
                        </args>
                      </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                    </steps>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                </branches>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
                <name>Microservice detect change</name>
                <branches>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                    <name>default</name>
                    <steps>
                      <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                        <name>script</name>
                        <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                          <arguments class="linked-hash-map">
                            <entry>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                                <key>scriptBlock</key>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                                <value class="string">env.addFiles = sh (
                        script: &apos;git diff --diff-filter=A --name-only $GIT_PREVIOUS_COMMIT $GIT_COMMIT &apos;,
                        returnStdout: true).trim()
                    env.modifiedFiles = sh (
                        script: &apos;git diff --diff-filter=M --name-only $GIT_PREVIOUS_COMMIT $GIT_COMMIT &apos;,
                        returnStdout: true).trim()</value>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                            </entry>
                          </arguments>
                        </args>
                      </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                      <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                        <name>obtainChanges</name>
                        <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                          <arguments class="linked-hash-map"/>
                        </args>
                      </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                    </steps>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                </branches>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
                <name>Microservice Build and upload Docker image(modified)</name>
                <branches>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                    <name>default</name>
                    <steps>
                      <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                        <name>script</name>
                        <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                          <arguments class="linked-hash-map">
                            <entry>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                                <key>scriptBlock</key>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                                <value class="string">if(env.folders != &apos;&apos;){
                        try{
                            def arr = env.folders.split(&apos;,&apos;)
                            for(int i = 0; i &lt;arr.length; i++){
                                dir(&quot;${directory}${arr[i]}&quot;){
                                    dockerName = &quot;${registry}${arr[i]}_microservice&quot;
                                    dockerImage = docker.build dockerName
                                    docker.withRegistry(&apos;&apos;, registryCredential){
                                        dockerImage.push()
                                    }
                                }
                            }
                        }catch(Exception e){
                            echo &quot;Microservice Build and upload Docker image(modified) failed&quot;
                            currentBuild.result = &apos;FAILURE&apos;
                        }
                    }</value>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                            </entry>
                          </arguments>
                        </args>
                      </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                    </steps>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                </branches>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
                <name>Microservice Build and upload Docker image(add)</name>
                <branches>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                    <name>default</name>
                    <steps>
                      <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                        <name>script</name>
                        <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                          <arguments class="linked-hash-map">
                            <entry>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                                <key>scriptBlock</key>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                                <value class="string">if(env.folders_new != &apos;&apos;){
                        try{
                            def arr_new = env.folders_new.split(&apos;,&apos;)
                            for(int i = 0; i &lt;arr_new.length; i++){
                                dir(&quot;${directory}${arr_new[i]}&quot;){
                                    echo arr_new[i]
                                    dockerName = &quot;${registry}${arr_new[i]}_microservice&quot;
                                    dockerImage = docker.build dockerName
                                    docker.withRegistry(&apos;&apos;, registryCredential){
                                        dockerImage.push()
                                        }
                                    }
                                }
                        } catch(Exception e){
                            echo &quot;Microservice Build and upload Docker image(add) failed&quot;
                            currentBuild.result = &apos;FAILURE&apos;
                        }
                    }</value>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                            </entry>
                          </arguments>
                        </args>
                      </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                    </steps>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                </branches>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
                <name>Microservice task (modified)</name>
                <branches>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                    <name>default</name>
                    <steps>
                      <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                        <name>script</name>
                        <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                          <arguments class="linked-hash-map">
                            <entry>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                                <key>scriptBlock</key>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                                <value class="string">try{
                        if(env.folders != &apos;&apos; ){
                            dir(&quot;./microservices&quot;){
                                flag = &quot;edit&quot;
                                sh &quot;bash helper.sh ${env.folders} ${flag}&quot; 
                            }
                        }
                    }catch(Exception e){
                            echo &quot;Microservice task (modified) failed&quot;
                            currentBuild.result = &apos;FAILURE&apos;
                    }</value>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                            </entry>
                          </arguments>
                        </args>
                      </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                    </steps>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                </branches>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
                <name>Microservice task (add)</name>
                <branches>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                    <name>default</name>
                    <steps>
                      <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                        <name>script</name>
                        <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                          <arguments class="linked-hash-map">
                            <entry>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                                <key>scriptBlock</key>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                                <value class="string">try{
                        if(env.folders_new != &apos;&apos;){
                            dir(&quot;./microservices&quot;){
                                flag_new = &quot;new&quot;
                                sh &quot;bash helper.sh ${env.folders_new} ${flag_new}&quot; 
                            }
                        }
                    }catch(Exception e){
                            echo &quot;Microservice task (add) failed&quot;
                            currentBuild.result = &apos;FAILURE&apos;
                    }</value>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                            </entry>
                          </arguments>
                        </args>
                      </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                    </steps>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                </branches>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
            </stages>
            <uuid>082cc5f0-d3e5-40ad-a2ee-d4da1c65799f</uuid>
          </stages>
          <environment>
            <variables class="linked-hash-map">
              <entry>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                  <key>dockerImage</key>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                  <value class="string"></value>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
              </entry>
              <entry>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                  <key>directory</key>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                  <value class="string">./microservices/services/</value>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
              </entry>
              <entry>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                  <key>registry</key>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                  <value class="string">jh7939/microservices:</value>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
              </entry>
              <entry>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                  <key>registry_mono</key>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                  <value class="string">jh7939/monolithic:monolithic-app</value>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
              </entry>
              <entry>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                  <key>registryCredential</key>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                  <value class="string">dockerhub_id</value>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
              </entry>
            </variables>
          </environment>
          <agent>
            <agentType>
              <key>any</key>
            </agentType>
          </agent>
        </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTPipelineDef>
      </pipelineDefs>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.ExecutionModelAction>
    <hudson.plugins.git.util.BuildData plugin="git@4.10.3">
      <buildsByBranchName>
        <entry>
          <string>refs/remotes/origin/main</string>
          <hudson.plugins.git.util.Build>
            <marked plugin="git-client@3.11.0">
              <sha1>dd07c953f0e12a0f487908752df765a54e94499c</sha1>
              <branches class="list">
                <hudson.plugins.git.Branch>
                  <sha1 reference="../../../sha1"/>
                  <name>refs/remotes/origin/main</name>
                </hudson.plugins.git.Branch>
              </branches>
            </marked>
            <revision reference="../marked"/>
            <hudsonBuildNumber>383</hudsonBuildNumber>
          </hudson.plugins.git.util.Build>
        </entry>
      </buildsByBranchName>
      <lastBuild reference="../buildsByBranchName/entry/hudson.plugins.git.util.Build"/>
      <remoteUrls>
        <string>https://github.com/noddyc/MicroProject</string>
      </remoteUrls>
    </hudson.plugins.git.util.BuildData>
    <org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState plugin="workflow-scm-step@2.13">
      <revisionStates>
        <entry>
          <string>git https://github.com/noddyc/MicroProject</string>
          <hudson.scm.SCMRevisionState_-None/>
        </entry>
      </revisionStates>
    </org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState>
    <org.jenkinsci.plugins.workflow.cps.EnvActionImpl plugin="workflow-cps@2659.v52d3de6044d0">
      <env class="tree-map">
        <entry>
          <string>addFiles</string>
          <string></string>
        </entry>
        <entry>
          <string>folders</string>
          <string></string>
        </entry>
        <entry>
          <string>folders_new</string>
          <string></string>
        </entry>
        <entry>
          <string>modifiedFiles</string>
          <string></string>
        </entry>
      </env>
    </org.jenkinsci.plugins.workflow.cps.EnvActionImpl>
  </actions>
  <queueId>399</queueId>
  <timestamp>1649146153238</timestamp>
  <startTime>1649146153272</startTime>
  <result>SUCCESS</result>
  <duration>9452</duration>
  <charset>UTF-8</charset>
  <keepLog>false</keepLog>
  <execution class="org.jenkinsci.plugins.workflow.cps.CpsFlowExecution">
    <result>SUCCESS</result>
    <script>def obtainChanges(){
    def arr_new = env.addFiles.split(&apos;\n&apos;)
    result_new = &apos;&apos;
    def tempResult_new = &apos;&apos;;
    def folders_new = &apos;&apos;;
    for(int i = 0; i &lt; arr_new.length;i++){
        def file_new = arr_new[i]
        if(file_new.startsWith(&apos;microservices/services/&apos;)){
            result_new = &quot;${result_new}${file_new},&quot;
        }
    }
    def arr_comma_new = result_new.split(&quot;,&quot;)
    for (int j = 0; j &lt; arr_comma_new.length; j++) {
            def folderDirectory_new = arr_comma_new[j].split(&apos;/&apos;)
            for(int z = 0; z &lt; folderDirectory_new.length; z++){
            if(folderDirectory_new[z] == &quot;services&quot; &amp;&amp; z+1 &lt; folderDirectory_new.length &amp;&amp; folderDirectory_new[z+1] != &quot;.DS_Store&quot;){
                tempResult_new = &quot;${tempResult_new}${folderDirectory_new[z+1]} &quot;
                break
            }
        }
    }

    def resultS_new = tempResult_new.tokenize(&apos; &apos;)
    resultS_new = resultS_new.unique()
    for(int i = 0; i &lt; resultS_new.size(); i++){
        folders_new=&quot;${folders_new}${resultS_new[i]},&quot;
    }
    echo &quot;new: ${folders_new}&quot;
    env.folders_new =  &quot;${folders_new}&quot;

    def arr = env.modifiedFiles.split(&apos;\n&apos;)
    result = &apos;&apos;
    def tempResult = &apos;&apos;;
    def folders = &apos;&apos;;
    for(int i = 0; i &lt; arr.length;i++){
        def file = arr[i]
        if(file.startsWith(&apos;microservices/services/&apos;)){
            result = &quot;${result}${file},&quot;
        }
    }
    def arr_comma = result.split(&quot;,&quot;)
    for (int j = 0; j &lt; arr_comma.length; j++) {
            def folderDirectory = arr_comma[j].split(&apos;/&apos;)
            for(int z = 0; z &lt; folderDirectory.length; z++){
            if(folderDirectory[z] == &quot;services&quot; &amp;&amp; z+1 &lt; folderDirectory.length &amp;&amp; folderDirectory[z+1] != &quot;.DS_Store&quot;){
                tempResult = &quot;${tempResult}${folderDirectory[z+1]} &quot;
                break
            }
        }
    }

    def resultS = tempResult.tokenize(&apos; &apos;)
    resultS = resultS.unique()
    for(int i = 0; i &lt; resultS.size(); i++){
        folders=&quot;${folders}${resultS[i]},&quot;
    }
    echo &quot;modified: ${folders}&quot;
    env.folders =  &quot;${folders}&quot;
}

pipeline{
    
    agent any
    environment{
        dockerImage = &apos;&apos;
        directory = &apos;./microservices/services/&apos;
        registry = &apos;jh7939/microservices:&apos;
        registry_mono = &apos;jh7939/monolithic:monolithic-app&apos;
        registryCredential = &apos;dockerhub_id&apos;
    }
    
    stages{
        stage(&apos;Checkout&apos;){
            steps{
                checkout([$class: &apos;GitSCM&apos;, branches: [[name: &apos;*/main&apos;]], extensions: [], userRemoteConfigs: [[url: &apos;https://github.com/noddyc/MicroProject&apos;]]])
            }
        }
        stage(&apos;Microservice detect change&apos;){
            steps{
                script{
                    env.addFiles = sh (
                        script: &apos;git diff --diff-filter=A --name-only $GIT_PREVIOUS_COMMIT $GIT_COMMIT &apos;,
                        returnStdout: true).trim()
                    env.modifiedFiles = sh (
                        script: &apos;git diff --diff-filter=M --name-only $GIT_PREVIOUS_COMMIT $GIT_COMMIT &apos;,
                        returnStdout: true).trim()
                }
                obtainChanges()
            }
        }
        stage(&apos;Microservice Build and upload Docker image(modified)&apos;){
            steps{
                script{
                    if(env.folders != &apos;&apos;){
                        try{
                            def arr = env.folders.split(&apos;,&apos;)
                            for(int i = 0; i &lt;arr.length; i++){
                                dir(&quot;${directory}${arr[i]}&quot;){
                                    dockerName = &quot;${registry}${arr[i]}_microservice&quot;
                                    dockerImage = docker.build dockerName
                                    docker.withRegistry(&apos;&apos;, registryCredential){
                                        dockerImage.push()
                                    }
                                }
                            }
                        }catch(Exception e){
                            echo &quot;Microservice Build and upload Docker image(modified) failed&quot;
                            currentBuild.result = &apos;FAILURE&apos;
                        }
                    }
                }
            }
        }

        stage(&apos;Microservice Build and upload Docker image(add)&apos;){
            steps{
                script{
                    if(env.folders_new != &apos;&apos;){
                        try{
                            def arr_new = env.folders_new.split(&apos;,&apos;)
                            for(int i = 0; i &lt;arr_new.length; i++){
                                dir(&quot;${directory}${arr_new[i]}&quot;){
                                    echo arr_new[i]
                                    dockerName = &quot;${registry}${arr_new[i]}_microservice&quot;
                                    dockerImage = docker.build dockerName
                                    docker.withRegistry(&apos;&apos;, registryCredential){
                                        dockerImage.push()
                                        }
                                    }
                                }
                        } catch(Exception e){
                            echo &quot;Microservice Build and upload Docker image(add) failed&quot;
                            currentBuild.result = &apos;FAILURE&apos;
                        }
                    }
                }
            }
        }
        stage(&apos;Microservice task (modified)&apos;){
            steps{
                script{
                    try{
                        if(env.folders != &apos;&apos; ){
                            dir(&quot;./microservices&quot;){
                                flag = &quot;edit&quot;
                                sh &quot;bash helper.sh ${env.folders} ${flag}&quot; 
                            }
                        }
                    }catch(Exception e){
                            echo &quot;Microservice task (modified) failed&quot;
                            currentBuild.result = &apos;FAILURE&apos;
                    }
                }
            }
        }
        stage(&apos;Microservice task (add)&apos;){
            steps{
                script{
                    try{
                        if(env.folders_new != &apos;&apos;){
                            dir(&quot;./microservices&quot;){
                                flag_new = &quot;new&quot;
                                sh &quot;bash helper.sh ${env.folders_new} ${flag_new}&quot; 
                            }
                        }
                    }catch(Exception e){
                            echo &quot;Microservice task (add) failed&quot;
                            currentBuild.result = &apos;FAILURE&apos;
                    }
                }
            }
        }
        // stage(&apos;Monolithic detect changes, build ,and push images&apos;){
        //     when{
        //         changeset &quot;monolithic-app/*&quot;
        //     }
        //     steps{
        //         script{
        //             try{
        //                 dir(&quot;monolithic-app&quot;){
        //                     dockerImage = docker.build registry_mono
        //                     docker.withRegistry(&apos;&apos;, registryCredential){
        //                                 dockerImage.push()
        //                     }
        //                 }
        //             }catch(Exception e){
        //                     echo &quot;Monolithic detect failed&quot;
        //                     currentBuild.result = &apos;FAILURE&apos;
        //             }
        //         }
        //     }
        // }
        // stage(&apos;Monolithic task&apos;){
        //     when{
        //         changeset &quot;monolithic-app/*&quot;
        //     }
        //     steps{
        //         script{
        //             try{
        //                 dir(&quot;monolithic-app&quot;){
        //                 sh &quot;bash sshlogin.sh&quot;
        //                 }
        //             }catch(Exception e){
        //                 echo &quot;Monolithic task failed&quot;
        //                 currentBuild.result = &apos;FAILURE&apos;
        //             }
        //         }
        //     }
        // }
    }
}
</script>
    <loadedScripts class="map"/>
    <durabilityHint>MAX_SURVIVABILITY</durabilityHint>
    <timings class="map">
      <entry>
        <string>flowNode</string>
        <long>2345795708</long>
      </entry>
      <entry>
        <string>classLoad</string>
        <long>791105426</long>
      </entry>
      <entry>
        <string>run</string>
        <long>6578306111</long>
      </entry>
      <entry>
        <string>parse</string>
        <long>397176459</long>
      </entry>
      <entry>
        <string>saveProgram</string>
        <long>1730428794</long>
      </entry>
    </timings>
    <sandbox>true</sandbox>
    <iota>69</iota>
    <head>1:69</head>
    <done>true</done>
    <resumeBlocked>false</resumeBlocked>
  </execution>
  <completed>true</completed>
  <checkouts class="hudson.util.PersistedList">
    <org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout>
      <scm class="hudson.plugins.git.GitSCM" plugin="git@4.10.3">
        <configVersion>2</configVersion>
        <userRemoteConfigs>
          <hudson.plugins.git.UserRemoteConfig>
            <url>https://github.com/noddyc/MicroProject</url>
          </hudson.plugins.git.UserRemoteConfig>
        </userRemoteConfigs>
        <branches>
          <hudson.plugins.git.BranchSpec>
            <name>*/main</name>
          </hudson.plugins.git.BranchSpec>
        </branches>
        <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
        <submoduleCfg class="empty-list"/>
        <extensions/>
      </scm>
      <node></node>
      <workspace>/Users/jianhe/.jenkins/workspace/jenkinsMicro</workspace>
      <changelogFile>/Users/jianhe/.jenkins/jobs/jenkinsMicro/builds/383/changelog10041699238742678142.xml</changelogFile>
      <pollingBaseline class="hudson.scm.SCMRevisionState$None" reference="../../../actions/org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState/revisionStates/entry/hudson.scm.SCMRevisionState_-None"/>
    </org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout>
    <org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout>
      <scm class="hudson.plugins.git.GitSCM" plugin="git@4.10.3">
        <configVersion>2</configVersion>
        <userRemoteConfigs>
          <hudson.plugins.git.UserRemoteConfig>
            <url>https://github.com/noddyc/MicroProject</url>
          </hudson.plugins.git.UserRemoteConfig>
        </userRemoteConfigs>
        <branches>
          <hudson.plugins.git.BranchSpec>
            <name>*/main</name>
          </hudson.plugins.git.BranchSpec>
        </branches>
        <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
        <submoduleCfg class="empty-list"/>
        <extensions/>
      </scm>
      <node></node>
      <workspace>/Users/jianhe/.jenkins/workspace/jenkinsMicro</workspace>
      <pollingBaseline class="hudson.scm.SCMRevisionState$None" reference="../../../actions/org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState/revisionStates/entry/hudson.scm.SCMRevisionState_-None"/>
    </org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout>
  </checkouts>
</flow-build>