<?xml version='1.1' encoding='UTF-8'?>
<flow-build plugin="workflow-job@1145.v7f2433caa07f">
  <actions>
    <hudson.model.CauseAction>
      <causeBag class="linked-hash-map">
        <entry>
          <hudson.model.Cause_-UserIdCause>
            <userId>jh7939</userId>
          </hudson.model.Cause_-UserIdCause>
          <int>1</int>
        </entry>
      </causeBag>
    </hudson.model.CauseAction>
    <org.jenkinsci.plugins.workflow.libs.LibrariesAction plugin="workflow-cps-global-lib@564.ve62a_4eb_b_e039">
      <libraries/>
    </org.jenkinsci.plugins.workflow.libs.LibrariesAction>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.ExecutionModelAction plugin="pipeline-model-definition@1.9.3">
      <stagesUUID>93eb0fb8-0338-4788-9886-ea7b6e444150</stagesUUID>
      <pipelineDefs>
        <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTPipelineDef plugin="pipeline-model-api@1.9.3">
          <stages>
            <stages>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
                <name>Checkout</name>
                <branches>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                    <name>default</name>
                    <steps>
                      <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                        <name>checkout</name>
                        <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                          <arguments class="linked-hash-map">
                            <entry>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                                <key>scm</key>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-GStringValue>
                                <value class="string">[$class: &apos;GitSCM&apos;, branches: [[name: &apos;*/master&apos;]], extensions: [], userRemoteConfigs: [[url: &apos;https://github.com/hxk1633/Microservices-Project&apos;]]]</value>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-GStringValue>
                            </entry>
                          </arguments>
                        </args>
                      </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                      <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                        <name>echo</name>
                        <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                          <arguments class="linked-hash-map">
                            <entry>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                                <key>message</key>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-GStringValue>
                                <value class="string">&quot;${currentBuild.changeSets[0]}&quot;</value>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-GStringValue>
                            </entry>
                          </arguments>
                        </args>
                      </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                    </steps>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                </branches>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
            </stages>
            <uuid>93eb0fb8-0338-4788-9886-ea7b6e444150</uuid>
          </stages>
          <environment>
            <variables class="linked-hash-map">
              <entry>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                  <key>dockerImage</key>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                  <value class="string"></value>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
              </entry>
              <entry>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                  <key>registry</key>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                  <value class="string">jh7939/microservices:</value>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
              </entry>
              <entry>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                  <key>registry1</key>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                  <value class="string">jh7939/microservices:comments_microservice</value>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
              </entry>
              <entry>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                  <key>registry2</key>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                  <value class="string">jh7939/microservices:posts_microservice</value>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
              </entry>
              <entry>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                  <key>registry3</key>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                  <value class="string">jh7939/microservices:threads_microservice</value>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
              </entry>
              <entry>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                  <key>registry4</key>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                  <value class="string">jh7939/microservices:users_microservice</value>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
              </entry>
              <entry>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                  <key>registry5</key>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                  <value class="string">jh7939/microservices:my-haproxy</value>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
              </entry>
              <entry>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                  <key>registryCredential</key>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                  <value class="string">dockerhub_id</value>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
              </entry>
            </variables>
          </environment>
          <agent>
            <agentType>
              <key>any</key>
            </agentType>
          </agent>
        </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTPipelineDef>
      </pipelineDefs>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.ExecutionModelAction>
    <hudson.plugins.git.util.BuildData plugin="git@4.10.3">
      <buildsByBranchName>
        <entry>
          <string>refs/remotes/origin/jenkinsMicro</string>
          <hudson.plugins.git.util.Build>
            <marked plugin="git-client@3.11.0">
              <sha1>af3c7fe6b838a5af304586e4601cf2183fbfc6ef</sha1>
              <branches class="list">
                <hudson.plugins.git.Branch>
                  <sha1 reference="../../../sha1"/>
                  <name>refs/remotes/origin/jenkinsMicro</name>
                </hudson.plugins.git.Branch>
              </branches>
            </marked>
            <revision plugin="git-client@3.11.0">
              <sha1 reference="../../marked/sha1"/>
              <branches class="list">
                <hudson.plugins.git.Branch reference="../../../marked/branches/hudson.plugins.git.Branch"/>
              </branches>
            </revision>
            <hudsonBuildNumber>50</hudsonBuildNumber>
          </hudson.plugins.git.util.Build>
        </entry>
        <entry>
          <string>refs/remotes/origin/master</string>
          <hudson.plugins.git.util.Build>
            <marked plugin="git-client@3.11.0">
              <sha1>1771167008d42422872a5ac858fa9a24e8d09e57</sha1>
              <branches class="list">
                <hudson.plugins.git.Branch>
                  <sha1 reference="../../../sha1"/>
                  <name>refs/remotes/origin/master</name>
                </hudson.plugins.git.Branch>
              </branches>
            </marked>
            <revision reference="../marked"/>
            <hudsonBuildNumber>243</hudsonBuildNumber>
          </hudson.plugins.git.util.Build>
        </entry>
      </buildsByBranchName>
      <lastBuild reference="../buildsByBranchName/entry[2]/hudson.plugins.git.util.Build"/>
      <remoteUrls>
        <string>https://github.com/hxk1633/Microservices-Project</string>
      </remoteUrls>
      <index>2</index>
    </hudson.plugins.git.util.BuildData>
    <org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState plugin="workflow-scm-step@2.13">
      <revisionStates>
        <entry>
          <string>git https://github.com/hxk1633/Microservices-Project</string>
          <hudson.scm.SCMRevisionState_-None/>
        </entry>
      </revisionStates>
    </org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState>
  </actions>
  <queueId>142</queueId>
  <timestamp>1648253483903</timestamp>
  <startTime>1648253483913</startTime>
  <result>SUCCESS</result>
  <duration>4229</duration>
  <charset>UTF-8</charset>
  <keepLog>false</keepLog>
  <execution class="org.jenkinsci.plugins.workflow.cps.CpsFlowExecution">
    <result>SUCCESS</result>
    <script>// def create_stages(values){
//     for (int i=0; i&lt;values.size();i++) {
//         stage(&quot;update ${values[i]}&quot;){
//             env.&quot;name&quot;=values[i].split(&apos; &apos;)[0]
//             env.&quot;flag&quot;=values[i].split(&apos; &apos;)[1]
//             dockerName = &quot;${registry}${name}_microservice&quot;
//             checkout([$class: &apos;GitSCM&apos;, branches: [[name: &apos;*/master&apos;]], extensions: [], userRemoteConfigs: [[url: &apos;https://github.com/hxk1633/Microservices-Project&apos;]]])
//             dir(&quot;./microservices/services/${name}&quot;){
//                 dockerImage = docker.build dockerName
//                 docker.withRegistry(&apos;&apos;, registryCredential){
//                             dockerImage.push()
//                 }
//             }
//             sh &apos;bash add_newservice.sh ${name}&apos;
//             dir(&quot;./microservices&quot;){
//                 sh &quot;docker pull ${registry}${name}_microservice&quot;
//                 sh &quot;bash update_containers.sh ${name} 4&quot;
//             }
//         }
//     }
// }
def loop(){

    for(int i=0; i&lt;currentBuild.changeSets.size();i++){
        var = currentBuild.changeSets[i]
        echo &quot;${var}&quot;
        // echo &quot;{values[i]}&quot;
    }
}

pipeline{
    
    agent any
    
    
    environment{
        dockerImage = &apos;&apos;
        registry = &apos;jh7939/microservices:&apos;
        registry1 = &apos;jh7939/microservices:comments_microservice&apos; 
        registry2 = &apos;jh7939/microservices:posts_microservice&apos; 
        registry3 = &apos;jh7939/microservices:threads_microservice&apos;
        registry4 = &apos;jh7939/microservices:users_microservice&apos;
        registry5 = &apos;jh7939/microservices:my-haproxy&apos;
        registryCredential = &apos;dockerhub_id&apos;
    }
    
    stages{
        stage(&apos;Checkout&apos;){
            steps{
                checkout([$class: &apos;GitSCM&apos;, branches: [[name: &apos;*/master&apos;]], extensions: [], userRemoteConfigs: [[url: &apos;https://github.com/hxk1633/Microservices-Project&apos;]]])
                // loop()
                echo &quot;${currentBuild.changeSets[0]}&quot;
            }
        }
        // stage(&apos;Build Docker image&apos;){
        //     when {
        //         changeset &quot;microservices/services/comments/*&quot;
        //     }
        //     steps{
        //         script{
        //             dir(&apos;./microservices/services/comments&apos;){
        //                 dockerImage = docker.build registry1
        //              }
        //         }
        //     }
        // }
        
        // stage(&quot;Uploading Image&quot;){
        //     when {
        //         changeset &quot;microservices/services/comments/*&quot;
        //     }
        //     steps{
        //         script{
        //                 docker.withRegistry(&apos;&apos;, registryCredential){
        //                     dockerImage.push()
        //             }
        //         }
        //     }
        // }

        // stage(&apos;Checkout2&apos;){
        //     steps{
        //         checkout([$class: &apos;GitSCM&apos;, branches: [[name: &apos;*/master&apos;]], extensions: [], userRemoteConfigs: [[url: &apos;https://github.com/hxk1633/Microservices-Project&apos;]]])
 
          
        //     }
        // }
        // stage(&apos;Build Docker image2&apos;){
        //     when {
        //         changeset &quot;microservices/services/posts/*&quot;
        //     }
        //     steps{
        //         script{
        //             dir(&apos;./microservices/services/posts&apos;){
        //                 dockerImage = docker.build registry2
        //              }
        //         }
        //     }
        // }
        
        // stage(&quot;Uploading Image2&quot;){
            
        //     when {
        //         changeset &quot;microservices/services/posts/*&quot;
        //     }
        //     steps{
        //         script{
        //                 docker.withRegistry(&apos;&apos;, registryCredential){
        //                     dockerImage.push()
        //             }
        //         }
        //     }
        // }
        
        // stage(&apos;Checkout3&apos;){
        //     steps{
        //         checkout([$class: &apos;GitSCM&apos;, branches: [[name: &apos;*/master&apos;]], extensions: [], userRemoteConfigs: [[url: &apos;https://github.com/hxk1633/Microservices-Project&apos;]]])
 
          
        //     }
        // }
        // stage(&apos;Build Docker image3&apos;){
            
        //     when {
        //         changeset &quot;microservices/services/threads/*&quot;
        //     }
        //     steps{
        //         script{
        //             dir(&apos;./microservices/services/threads&apos;){
        //                 dockerImage = docker.build registry3
        //              }
        //         }
        //     }
        // }
        
        // stage(&quot;Uploading Image3&quot;){
            
        //     when {
        //         changeset &quot;microservices/services/threads/*&quot;
        //     }
        //     steps{
        //         script{
        //                 docker.withRegistry(&apos;&apos;, registryCredential){
        //                     dockerImage.push()
        //             }
        //         }
        //     }
        // }
        
        // stage(&apos;Checkout4&apos;){
        //     steps{
        //         checkout([$class: &apos;GitSCM&apos;, branches: [[name: &apos;*/master&apos;]], extensions: [], userRemoteConfigs: [[url: &apos;https://github.com/hxk1633/Microservices-Project&apos;]]])
 
          
        //     }
        // }
        // stage(&apos;Build Docker image4&apos;){
        //     when {
        //         changeset &quot;microservices/services/users/*&quot;
        //     }
        //     steps{
        //         script{
        //             dir(&apos;./microservices/services/users&apos;){
        //                 dockerImage = docker.build registry4
        //              }
        //         }
        //     }
        // }
        
        // stage(&quot;Uploading Image4&quot;){
            
        //     when {
        //         changeset &quot;microservices/services/users/*&quot;
        //     }
        //     steps{
        //         script{
        //                 docker.withRegistry(&apos;&apos;, registryCredential){
        //                     dockerImage.push()
        //             }
        //         }
        //     }
        // }
        
        // stage(&apos;Checkout5&apos;){
        //     steps{
        //         checkout([$class: &apos;GitSCM&apos;, branches: [[name: &apos;*/master&apos;]], extensions: [], userRemoteConfigs: [[url: &apos;https://github.com/hxk1633/Microservices-Project&apos;]]])
          
        //     }
        // }
        // stage(&apos;Build Docker image5&apos;){
            
        //     when {
        //         changeset &quot;microservices/haproxy/*&quot;
        //     }
        //     steps{
        //         script{
        //             dir(&apos;./microservices/haproxy&apos;){
        //                 dockerImage = docker.build registry5
        //              }
        //         }
        //     }
        // }
        
        // stage(&quot;Uploading Image5&quot;){
            
        //     when {
        //         changeset &quot;microservices/haproxy/*&quot;
        //     }
        //     steps{
        //         script{
        //                 docker.withRegistry(&apos;&apos;, registryCredential){
        //                     dockerImage.push()
        //             }
        //         }
        //     }
        // }

        // stage(&quot;swap threads containers&quot;){
        //     when{
        //             changeset &quot;microservices/services/threads/*&quot;  
        //         }           
        //     steps{
        //         script{
        //             dir(&quot;./microservices&quot;){
        //                 sh &apos;bash sshlogin.sh threads&apos;
        //                 // sh &apos;bash update_containers.sh threads 4&apos;
        //             }
        //         }
        //     }
        // }

        // stage(&quot;swap posts containers&quot;){
        //     when{
        //             changeset &quot;microservices/services/posts/*&quot;  
        //         }           
        //     steps{
        //         script{
        //             dir(&quot;./microservices&quot;){
        //                 sh &apos;bash sshlogin.sh posts&apos;
        //                 // sh &apos;bash update_containers.sh posts 4&apos;
        //             }
        //         }
        //     }
        // }

        // stage(&quot;swap users containers&quot;){
        //     when{
        //             changeset &quot;microservices/services/users/*&quot;  
        //         }           
        //     steps{
        //         script{
        //             dir(&quot;./microservices&quot;){
        //                 sh &apos;bash sshlogin.sh users&apos;
        //                 // sh &apos;bash update_containers.sh users 4&apos;
        //             }
        //         }
        //     }
        // }

        // stage(&quot;swap comments containers&quot;){
        //     when{
        //             changeset &quot;microservices/services/comments/*&quot;  
        //         }           
        //     steps{
        //         script{
        //             dir(&quot;./microservices&quot;){
        //                 sh &apos;bash sshlogin.sh comments&apos;
        //                 // sh &apos;bash update_containers.sh comments 4&apos;
        //             }
        //         }
        //     }
        // }
        // stage(&apos;Detect new folder&apos;){
        //     steps{
        //         script{
        //             dir(&quot;./microservices&quot;){
        //                 newly_commit = sh (
        //                     script: &apos;bash helper.sh&apos;,
        //                     returnStdout: true
        //                 ).trim()
        //                 def v = &quot;${newly_commit}&quot;.split(&apos;\n&apos;)
        //                 create_stages(v)
        //             }
        //         }
        //     }
        // }
    }
}
</script>
    <loadedScripts class="map"/>
    <durabilityHint>MAX_SURVIVABILITY</durabilityHint>
    <timings class="map">
      <entry>
        <string>flowNode</string>
        <long>918758122</long>
      </entry>
      <entry>
        <string>classLoad</string>
        <long>221471007</long>
      </entry>
      <entry>
        <string>run</string>
        <long>2309552795</long>
      </entry>
      <entry>
        <string>parse</string>
        <long>53165708</long>
      </entry>
      <entry>
        <string>saveProgram</string>
        <long>568116292</long>
      </entry>
    </timings>
    <sandbox>true</sandbox>
    <iota>26</iota>
    <head>1:26</head>
    <done>true</done>
    <resumeBlocked>false</resumeBlocked>
  </execution>
  <completed>true</completed>
  <checkouts class="hudson.util.PersistedList">
    <org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout>
      <scm class="hudson.plugins.git.GitSCM" plugin="git@4.10.3">
        <configVersion>2</configVersion>
        <userRemoteConfigs>
          <hudson.plugins.git.UserRemoteConfig>
            <url>https://github.com/hxk1633/Microservices-Project</url>
          </hudson.plugins.git.UserRemoteConfig>
        </userRemoteConfigs>
        <branches>
          <hudson.plugins.git.BranchSpec>
            <name>*/master</name>
          </hudson.plugins.git.BranchSpec>
        </branches>
        <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
        <submoduleCfg class="empty-list"/>
        <extensions/>
      </scm>
      <node></node>
      <workspace>/Users/jianhe/.jenkins/workspace/jenkinsMicro</workspace>
      <changelogFile>/Users/jianhe/.jenkins/jobs/jenkinsMicro/builds/243/changelog5157720604599146107.xml</changelogFile>
      <pollingBaseline class="hudson.scm.SCMRevisionState$None" reference="../../../actions/org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState/revisionStates/entry/hudson.scm.SCMRevisionState_-None"/>
    </org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout>
    <org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout>
      <scm class="hudson.plugins.git.GitSCM" plugin="git@4.10.3">
        <configVersion>2</configVersion>
        <userRemoteConfigs>
          <hudson.plugins.git.UserRemoteConfig>
            <url>https://github.com/hxk1633/Microservices-Project</url>
          </hudson.plugins.git.UserRemoteConfig>
        </userRemoteConfigs>
        <branches>
          <hudson.plugins.git.BranchSpec>
            <name>*/master</name>
          </hudson.plugins.git.BranchSpec>
        </branches>
        <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
        <submoduleCfg class="empty-list"/>
        <extensions/>
      </scm>
      <node></node>
      <workspace>/Users/jianhe/.jenkins/workspace/jenkinsMicro</workspace>
      <pollingBaseline class="hudson.scm.SCMRevisionState$None" reference="../../../actions/org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState/revisionStates/entry/hudson.scm.SCMRevisionState_-None"/>
    </org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout>
  </checkouts>
</flow-build>